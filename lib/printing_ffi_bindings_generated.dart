// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/printing_ffi.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class PrintingFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PrintingFfiBindings(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PrintingFfiBindings.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  int sum(
    int a,
    int b,
  ) {
    return _sum(
      a,
      b,
    );
  }

  late final _sumPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  int sum_long_running(
    int a,
    int b,
  ) {
    return _sum_long_running(
      a,
      b,
    );
  }

  late final _sum_long_runningPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('sum_long_running');
  late final _sum_long_running = _sum_long_runningPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<PrinterList> get_printers() {
    return _get_printers();
  }

  late final _get_printersPtr = _lookup<ffi.NativeFunction<ffi.Pointer<PrinterList> Function()>>('get_printers');
  late final _get_printers = _get_printersPtr.asFunction<ffi.Pointer<PrinterList> Function()>();

  void free_printer_list(
    ffi.Pointer<PrinterList> printer_list,
  ) {
    return _free_printer_list(
      printer_list,
    );
  }

  late final _free_printer_listPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PrinterList>)>>('free_printer_list');
  late final _free_printer_list = _free_printer_listPtr.asFunction<void Function(ffi.Pointer<PrinterList>)>();

  ffi.Pointer<PrinterInfo> get_default_printer() {
    return _get_default_printer();
  }

  late final _get_default_printerPtr = _lookup<ffi.NativeFunction<ffi.Pointer<PrinterInfo> Function()>>('get_default_printer');
  late final _get_default_printer = _get_default_printerPtr.asFunction<ffi.Pointer<PrinterInfo> Function()>();

  void free_printer_info(
    ffi.Pointer<PrinterInfo> printer_info,
  ) {
    return _free_printer_info(
      printer_info,
    );
  }

  late final _free_printer_infoPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PrinterInfo>)>>('free_printer_info');
  late final _free_printer_info = _free_printer_infoPtr.asFunction<void Function(ffi.Pointer<PrinterInfo>)>();

  int open_printer_properties(
    ffi.Pointer<ffi.Char> printer_name,
    int hwnd,
  ) {
    return _open_printer_properties(
      printer_name,
      hwnd,
    );
  }

  late final _open_printer_propertiesPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.IntPtr)>>('open_printer_properties');
  late final _open_printer_properties = _open_printer_propertiesPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  bool raw_data_to_printer(
    ffi.Pointer<ffi.Char> printer_name,
    ffi.Pointer<ffi.Uint8> data,
    int length,
    ffi.Pointer<ffi.Char> doc_name,
    int num_options,
    ffi.Pointer<ffi.Pointer<ffi.Char>> option_keys,
    ffi.Pointer<ffi.Pointer<ffi.Char>> option_values,
  ) {
    return _raw_data_to_printer(
      printer_name,
      data,
      length,
      doc_name,
      num_options,
      option_keys,
      option_values,
    );
  }

  late final _raw_data_to_printerPtr = _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
    'raw_data_to_printer',
  );
  late final _raw_data_to_printer = _raw_data_to_printerPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  bool print_pdf(
    ffi.Pointer<ffi.Char> printer_name,
    ffi.Pointer<ffi.Char> pdf_file_path,
    ffi.Pointer<ffi.Char> doc_name,
    int scaling_mode,
    int copies,
    ffi.Pointer<ffi.Char> page_range,
    int num_options,
    ffi.Pointer<ffi.Pointer<ffi.Char>> option_keys,
    ffi.Pointer<ffi.Pointer<ffi.Char>> option_values,
    ffi.Pointer<ffi.Char> alignment,
  ) {
    return _print_pdf(
      printer_name,
      pdf_file_path,
      doc_name,
      scaling_mode,
      copies,
      page_range,
      num_options,
      option_keys,
      option_values,
      alignment,
    );
  }

  late final _print_pdfPtr =
      _lookup<
        ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>
      >('print_pdf');
  late final _print_pdf = _print_pdfPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<JobList> get_print_jobs(
    ffi.Pointer<ffi.Char> printer_name,
  ) {
    return _get_print_jobs(
      printer_name,
    );
  }

  late final _get_print_jobsPtr = _lookup<ffi.NativeFunction<ffi.Pointer<JobList> Function(ffi.Pointer<ffi.Char>)>>('get_print_jobs');
  late final _get_print_jobs = _get_print_jobsPtr.asFunction<ffi.Pointer<JobList> Function(ffi.Pointer<ffi.Char>)>();

  void free_job_list(
    ffi.Pointer<JobList> job_list,
  ) {
    return _free_job_list(
      job_list,
    );
  }

  late final _free_job_listPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<JobList>)>>('free_job_list');
  late final _free_job_list = _free_job_listPtr.asFunction<void Function(ffi.Pointer<JobList>)>();

  bool pause_print_job(
    ffi.Pointer<ffi.Char> printer_name,
    int job_id,
  ) {
    return _pause_print_job(
      printer_name,
      job_id,
    );
  }

  late final _pause_print_jobPtr = _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Uint32)>>('pause_print_job');
  late final _pause_print_job = _pause_print_jobPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>, int)>();

  bool resume_print_job(
    ffi.Pointer<ffi.Char> printer_name,
    int job_id,
  ) {
    return _resume_print_job(
      printer_name,
      job_id,
    );
  }

  late final _resume_print_jobPtr = _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Uint32)>>('resume_print_job');
  late final _resume_print_job = _resume_print_jobPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>, int)>();

  bool cancel_print_job(
    ffi.Pointer<ffi.Char> printer_name,
    int job_id,
  ) {
    return _cancel_print_job(
      printer_name,
      job_id,
    );
  }

  late final _cancel_print_jobPtr = _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Uint32)>>('cancel_print_job');
  late final _cancel_print_job = _cancel_print_jobPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<CupsOptionList> get_supported_cups_options(
    ffi.Pointer<ffi.Char> printer_name,
  ) {
    return _get_supported_cups_options(
      printer_name,
    );
  }

  late final _get_supported_cups_optionsPtr = _lookup<ffi.NativeFunction<ffi.Pointer<CupsOptionList> Function(ffi.Pointer<ffi.Char>)>>('get_supported_cups_options');
  late final _get_supported_cups_options = _get_supported_cups_optionsPtr.asFunction<ffi.Pointer<CupsOptionList> Function(ffi.Pointer<ffi.Char>)>();

  void free_cups_option_list(
    ffi.Pointer<CupsOptionList> option_list,
  ) {
    return _free_cups_option_list(
      option_list,
    );
  }

  late final _free_cups_option_listPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CupsOptionList>)>>('free_cups_option_list');
  late final _free_cups_option_list = _free_cups_option_listPtr.asFunction<void Function(ffi.Pointer<CupsOptionList>)>();

  ffi.Pointer<WindowsPrinterCapabilities> get_windows_printer_capabilities(
    ffi.Pointer<ffi.Char> printer_name,
  ) {
    return _get_windows_printer_capabilities(
      printer_name,
    );
  }

  late final _get_windows_printer_capabilitiesPtr = _lookup<ffi.NativeFunction<ffi.Pointer<WindowsPrinterCapabilities> Function(ffi.Pointer<ffi.Char>)>>('get_windows_printer_capabilities');
  late final _get_windows_printer_capabilities = _get_windows_printer_capabilitiesPtr.asFunction<ffi.Pointer<WindowsPrinterCapabilities> Function(ffi.Pointer<ffi.Char>)>();

  void free_windows_printer_capabilities(
    ffi.Pointer<WindowsPrinterCapabilities> capabilities,
  ) {
    return _free_windows_printer_capabilities(
      capabilities,
    );
  }

  late final _free_windows_printer_capabilitiesPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WindowsPrinterCapabilities>)>>('free_windows_printer_capabilities');
  late final _free_windows_printer_capabilities = _free_windows_printer_capabilitiesPtr.asFunction<void Function(ffi.Pointer<WindowsPrinterCapabilities>)>();

  ffi.Pointer<ffi.Char> get_last_error() {
    return _get_last_error();
  }

  late final _get_last_errorPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('get_last_error');
  late final _get_last_error = _get_last_errorPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// Functions that submit a job and return a job ID for status tracking.
  int submit_raw_data_job(
    ffi.Pointer<ffi.Char> printer_name,
    ffi.Pointer<ffi.Uint8> data,
    int length,
    ffi.Pointer<ffi.Char> doc_name,
    int num_options,
    ffi.Pointer<ffi.Pointer<ffi.Char>> option_keys,
    ffi.Pointer<ffi.Pointer<ffi.Char>> option_values,
  ) {
    return _submit_raw_data_job(
      printer_name,
      data,
      length,
      doc_name,
      num_options,
      option_keys,
      option_values,
    );
  }

  late final _submit_raw_data_jobPtr = _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
    'submit_raw_data_job',
  );
  late final _submit_raw_data_job = _submit_raw_data_jobPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int submit_pdf_job(
    ffi.Pointer<ffi.Char> printer_name,
    ffi.Pointer<ffi.Char> pdf_file_path,
    ffi.Pointer<ffi.Char> doc_name,
    int scaling_mode,
    int copies,
    ffi.Pointer<ffi.Char> page_range,
    int num_options,
    ffi.Pointer<ffi.Pointer<ffi.Char>> option_keys,
    ffi.Pointer<ffi.Pointer<ffi.Char>> option_values,
    ffi.Pointer<ffi.Char> alignment,
  ) {
    return _submit_pdf_job(
      printer_name,
      pdf_file_path,
      doc_name,
      scaling_mode,
      copies,
      page_range,
      num_options,
      option_keys,
      option_values,
      alignment,
    );
  }

  late final _submit_pdf_jobPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>
      >('submit_pdf_job');
  late final _submit_pdf_job = _submit_pdf_jobPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();
}

/// Struct for returning printer information
final class PrinterInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @ffi.Uint32()
  external int state;

  external ffi.Pointer<ffi.Char> url;

  external ffi.Pointer<ffi.Char> model;

  external ffi.Pointer<ffi.Char> location;

  external ffi.Pointer<ffi.Char> comment;

  @ffi.Bool()
  external bool is_default;

  @ffi.Bool()
  external bool is_available;
}

final class PrinterList extends ffi.Struct {
  @ffi.Int()
  external int count;

  external ffi.Pointer<PrinterInfo> printers;
}

/// Struct for returning print job information
final class JobInfo extends ffi.Struct {
  @ffi.Uint32()
  external int id;

  external ffi.Pointer<ffi.Char> title;

  @ffi.Uint32()
  external int status;
}

final class JobList extends ffi.Struct {
  @ffi.Int()
  external int count;

  external ffi.Pointer<JobInfo> jobs;
}

/// Struct for a single CUPS option choice
final class CupsOptionChoice extends ffi.Struct {
  external ffi.Pointer<ffi.Char> choice;

  external ffi.Pointer<ffi.Char> text;
}

/// Struct for a list of CUPS option choices
final class CupsOptionChoiceList extends ffi.Struct {
  @ffi.Int()
  external int count;

  external ffi.Pointer<CupsOptionChoice> choices;
}

/// Struct for a single CUPS printer option
final class CupsOption extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> default_value;

  external CupsOptionChoiceList supported_values;
}

/// Struct for a list of CUPS printer options
final class CupsOptionList extends ffi.Struct {
  @ffi.Int()
  external int count;

  external ffi.Pointer<CupsOption> options;
}

/// Struct for a single Windows paper source (bin)
final class PaperSource extends ffi.Struct {
  @ffi.Short()
  external int id;

  external ffi.Pointer<ffi.Char> name;
}

final class PaperSourceList extends ffi.Struct {
  @ffi.Int()
  external int count;

  external ffi.Pointer<PaperSource> sources;
}

/// Struct for a single Windows media type
final class MediaType extends ffi.Struct {
  @ffi.Short()
  external int id;

  external ffi.Pointer<ffi.Char> name;
}

final class MediaTypeList extends ffi.Struct {
  @ffi.Int()
  external int count;

  external ffi.Pointer<MediaType> types;
}

/// Structs for Windows printer capabilities
final class PaperSize extends ffi.Struct {
  @ffi.Short()
  external int id;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Float()
  external double width_mm;

  @ffi.Float()
  external double height_mm;
}

final class PaperSizeList extends ffi.Struct {
  @ffi.Int()
  external int count;

  external ffi.Pointer<PaperSize> papers;
}

final class Resolution extends ffi.Struct {
  @ffi.Long()
  external int x_dpi;

  @ffi.Long()
  external int y_dpi;
}

final class ResolutionList extends ffi.Struct {
  @ffi.Int()
  external int count;

  external ffi.Pointer<Resolution> resolutions;
}

final class WindowsPrinterCapabilities extends ffi.Struct {
  external PaperSizeList paper_sizes;

  external PaperSourceList paper_sources;

  external ResolutionList resolutions;

  external MediaTypeList media_types;

  /// New fields for color mode and orientation capabilities
  @ffi.Bool()
  external bool is_color_supported;

  @ffi.Bool()
  external bool is_monochrome_supported;

  @ffi.Bool()
  external bool supports_landscape;
}
